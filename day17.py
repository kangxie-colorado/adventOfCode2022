from collections import defaultdict

TUNNEL_LEFT = 0
TUNNEL_RIGHT = 7


class Rock:
    def __init__(self, lines):
        self.lines = lines
        self.widest = 0
        width = 0
        for i, (start, end) in enumerate(lines):
            if end - start > width:
                self.widest = i
                width = end - start

    def copy(self, other):
        self.lines = other.lines.copy()
        self.widest = other.widest

    def __repr__(self):
        return f"{self.lines} {self.widest} {self.lines[self.widest]}"

    def at_the_tunnel_right(self):
        return self.lines[self.widest][1] == TUNNEL_RIGHT

    def at_the_tunnel_left(self):
        return self.lines[self.widest][0] == TUNNEL_LEFT

    def next_to_another_rock(self, delta, tunnel_lines):
        # check if this rock can move, if it is next to a formed rock
        # then it cannot
        for i, line in enumerate(self.lines):
            next_start, next_end = line[0] + delta, line[1] + delta
            if i < len(tunnel_lines):
                for start, end in tunnel_lines[i]:
                    if not (next_end <= start or next_start >= end):
                        return True
        return False

    def rest(self, tunnel_line_below, tunnel):
        if tunnel_line_below < 0:
            return True

        for i in range(len(self.lines)):
            rock_start, rock_end = self.lines[i]
            tunnel_line = tunnel_line_below + i
            if tunnel_line < len(tunnel):
                for start, end in tunnel[tunnel_line]:
                    # if not non-overlap, then overlap
                    if not (rock_end <= start or rock_start >= end):
                        return True

        return False

    def adjust(self, delta, tunnel_lines):
        # tunnel_lines: from the bottom line to the line of rock top
        if (delta == 1 and self.at_the_tunnel_right()) or (delta == -1 and self.at_the_tunnel_left()) or (
                self.next_to_another_rock(delta, tunnel_lines)):
            return

        # then can adjust
        for i, line in enumerate(self.lines):
            self.lines[i] = (line[0] + delta, line[1] + delta)
            assert line[0] + delta >= 0, f"{line} {delta} {self}"
            assert line[1] + delta <= 7, f"{line} {delta}"


h_line_rock = Rock([[2, 6]])
plus_rock = Rock([[3, 4], [2, 5], [3, 4]])
rev_l_rock = Rock([[2, 5], [4, 5], [4, 5]])
v_line_rock = Rock([[2, 3], [2, 3], [2, 3], [2, 3]])
block_rock = Rock([[2, 4], [2, 4]])

rocks_template = [h_line_rock, plus_rock, rev_l_rock, v_line_rock, block_rock]
puzzle_sample = '>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>'
deltas_sample = [-1 if c == '<' else 1 for c in puzzle_sample]

puzzle_input = '>>>><>>><<<<>>><<<<>><<<<>>>><<<<>>>><>>><<>><>>><<<<>><<<>>><><<<<>>>><<>>>><<<<>>>><>><<>>>><<>><<<>>>><>>><<>><<>><>>><<<<>>><<>>><<>><<<>>><><<<>>>><<<>><<<<>>>><<>>>><>>><>><<<>>>><<>>><><<<<>><<<<>>><<<<>>><<<<>>><>>><<<>>><>>>><>>>><<<<>><<>>>><<>>><<<>>><>>><><<<<>>>><><>>>><<><<<><<<<><><<>><<<<>>><<>>><<<<>>>><<><<<<>><>><<><<>>><<<>><<<><<<<>><<><<<<>>>><>><<<>>><><<><>>><<<<><>><<>>><<>>>><<><<>><<>><<<<>>>><<<>>>><><<<<>>><<>>><><<<><<<><<<><<>>><<<>>><<<<>>>><<<<>>><>>><>>>><<<>>><<<<><>>><<><>><<>><<<<>>>><<<<>>><<>>>><<>><<<<>>><<<<>>>><><<<<>><<<>><<<><<<><<<<>>><<<<>>>><><<<>>>><><<<<>>><<<<>>>><<<>><>>><<<>><><<<>>>><<<><<<>><<<<>><<<<>>>><<<>><<<>><<<<><<<<>><<>><<<>>><<<<>>>><<<><><>><<<<>>>><<<<><<<<><<>>>><<<>><>>>><>>><<<<>>><<>>>><<<><<<>>><<>>>><<>><<<<>>>><<<>><<<><<>>>><<>>>><<<<><>>>><<<>>>><<>><<<<>><<<<>><<<<>>><>>><<<>>>><<>>><<<>><<<<>>>><>><>>><>>>><<<><<><<<>><<<>>><<<<>>><<<<>>>><<<><<<>>><><>>><<<<>>><<<>>><<<>>>><><<<<>><<>><<<<>>><>>><<<>>><>><>>><><<<<>><<>><<<><>>><<><<<>>><<><<>><<<<><>>>><>>>><<<<><>><<>><<<<><><<<>>><<>><<>><<<>><<<<><<>>><>>><><<<>>><<<<>>><<><<<<>>><<<>>>><<>><<<>><<<<>>>><<>><<>>><><>>><>><<<>><><<>>><>><<>><<><<><<<>>>><<<>>><<<<>><<<<>>>><>>>><>>><<<<>><<<>>>><<<>>><<>><>>><>>>><<<<>>>><<<>>>><<<<>><<>>>><>><<<>>><<<><<>>>><<<><<<><<>>><><<<><<<>>>><<>>>><<<<>>>><<<<><<<><<<<>>>><<<<>>><<<>>>><<<><>>><>><<<<>>>><<<><<<<>><<<<>>>><><<<<>><>>><>>>><<<<>><><><<<>><<>>><<<><<<<>><>>><<>>>><<<<>>><<<>><<<<>><<<<>>>><>>><<>>><<<<>><<<<><<>><<<>>>><<<<>>><<<>><>><<>>>><<<>>>><>><>><<<>>>><>>>><<<<>>>><>><><><<<>>>><<>>>><<<><<<><>>><<<><<<<><><<<>>>><<<<>>>><<<<><<><<>>><<>>><<><<<><<<>><><>>>><<<><<>><<>><<<<>>><><<<>>>><>>>><<<>>><>>>><<<>>><<>>>><<<<><><<<>>>><<<<>><><<>><<<<>>><<<<><<<><>>><>>><>>>><>>><<<<>>><<<<><<><<<<>>><<<<>>>><><<<<><<<>><<<>><<>>>><<<><<<>>><<<>>>><<<<>>><>>><<>>>><>><<<><<<>><<<<><<<<>>><<<><><<<>><<<<>><>><>>><<<>>><><<<<><<<>><<<<>>>><<<>>>><>><<>>><<<>>>><<<<>>>><<<<><<>>>><<<>><<<<>><<<>>><<>>>><><<<<>>>><><<>>>><<><<<<>>><>><<<><<>>><>><<>><<<<><<<<>><<><<<><<<<>>>><<<>>>><<<<>><<>>><>>>><><<>><>>><<><>>><<<<>>>><<<<>>><<<><<<<>>><<<><>>>><<<<>>>><<<<>><<>><<<>>><>>>><<>>><>><<>><><><<<<>>>><<><<<>>>><<<>>><>><<>>><<<<>>><>>>><<>><<<<>>><<<<>><><<>>>><><<<>><<<>>><<<<>>><<<>><>>>><>>><<<><<<<>>>><<<<>><<>>>><>>>><<>><>>>><<>>><<><<>><<<<>><<<<>>><>>>><<<<>>><<<><>>>><<<>>>><>>><>><<<<>>><<<<>>><<>>><>>><>>>><>>><<<><<<><<<>>><<<>>>><<<<><<<<>><<<>>>><<>>>><>>><<<><>>>><<>><<<>>>><>>>><<<><<<<><><<>><<>><>>><<>>><>>><<>>>><<<<>>>><<<<>>><<<>>>><<<>><<>>>><<>>><<<>>><<<<><<<<>>><<>>>><<>>><<<<>>><<<<>>><<<<>>>><<<>>><<<><<>><<>><<><>>><<<>>><<>>>><>>>><>><><<>><<>>><<>>><<<>>><<<<>><<>>><<<>>><<<>><<<<>>><<<<>>><<>>><<<>>>><<<><><<>>><>><<<>>><<<>><<<><<<>><>><<<<>>><<<<>>><>>><<<<><<>>>><<><<<><<<>><<>>><<<<>><><<<>>>><<<><<><>>><><<><<<>>>><<>>><<<<>><<<<>><<<>>>><<<<><>>>><<<<>><<<>>>><<>>>><<<<>>>><>><<<<><>><<<<>>>><<<<>><<<>>><<>>>><>><<<<>><>>>><<<>>>><<<<><<<<>>>><<>>><<>>><<<<>>><<<><><<>>><<<>>>><<<<><>>><<<>>>><<>>>><<<>><<<>>>><>>><<<<>><><<<<>><<<<>><<>><<<>>><<><<<><<>>><<><<>><><<><<>>><<<<>><<<>><<<<><<<>><<<<>>>><<<><>>><<>><<<<>>><<<>>>><<<<>>><<>>>><<<>>>><<<<>><<<>>>><<<>><<<>>><<>>>><>><><<>>><<<<>>><<<<>>><>>><<>>>><<<<>><<<<>>><<<><<<><<><<<>>><>>>><<<><<>>>><<<>>><>><<>><<<<>><><><<>>>><><>>>><<<<>>><<>>>><>>>><<>>><<<><<<>><<>>><><>><<<><<<><>><>>>><<<<>><<<>>>><<>>><>><<>><<<>><<<>>>><>><<<>>><<>>><<<>>><<<<><>><<>>>><<><<><><<>>><><<<<>><<>><<<>>>><<<>>>><<<<>>><<>>>><<<<><>>><>>><<>><<<<>>><<<<>><>>>><<<<>>><<<>><<<<>><<<<>>><<<<>>><<<>><>><>><<>>><<<<>><>><>>><<>>><<>><<>>><<<<>>>><<<>><<<>>><><<>>><<<<>>><>><><<<><<<<>>>><<<<>>>><><<<>>>><<<<>>><>><<>><>>>><<>>><<>><<<><<<>>><<>>>><>>><<>>>><<<>>>><<>><<>>><>>>><<>>><<>><<<<>><<<<><>>>><<<<>><<>><<<<>>>><<>>><<<<>>><><<>><<><<<>><<<<>><>>>><<<>><<<>>>><<><<<<>>>><<<>><<<><><<<>>>><<<>>><<>>><<<>><<<<>>>><<<>>>><<<><>>><<><<<<>>><<<>>>><<>><>>>><<<<><<>><<>>><>>>><<>>>><><>>>><<<><<<>>>><>>>><<>>>><<>>>><><<>><<><<>>><<<<><<<<>>><<>>><<<>>><>>><<>>>><>><<<>><>>><<>><<<>>>><>>><<<<>>>><<>>>><<<>><<<>><<<<>>><<>>><<>><<>><>>><>>>><<>><>>>><<<<>><>>><<<>><<<><<>>>><>>><<>>><<><<<<>>>><<<>>><<<<>>><>><<<<>>><<<<>><>><<<<><<>><<<<>>>><><<<<>>><<<>>><>>>><<>>>><<<<>>><<>>><<>>><>><<<><><>>>><<>><><<>>><>><>>><<>>>><<<<>>><<<>><<<>>><<<<>>><>>>><>>><>>><<>>>><<<<><<<<>>><<>>>><<<<>>><>>><>><<<<>>><<>><<<<><<<<>><<<<>><<<<>><<>>><<><<<>>>><<<<><<<<>>>><<<<>><<<<><<<<>>>><<><<<<>>><<<<>>>><>>>><<>><<<>>>><<<><<<<>><<<>><<<>><><>>><><<><<><<<><<<>>><>>>><<>>>><><>>>><<<>>>><<<>>>><<><<><<>><<<<><><>><>>><<>><<<<>><<>>><>>>><<>>>><>>>><<<<>>>><<<<>>><>>><<>><<<>>><<>><<<>><<<>>>><<><<><<<<>>>><<<>>>><<><<<<>>>><<<><<<>>>><<<><<>>><><<>>><<<<>><<>><<<>>><<<<>>><<<><>>><<<<>>><<<<>><>>>><<<<><<<<>>><>>>><<<<>><<><<<><<>><<<<>><<>>><<<<>>><<<>>><<<>>>><>>><>>>><<>>>><<>><<>>><<><<<>><<>><>>><>><<<<><>>>><<>><<<>><<><><<<>>><<<<><<>>>><<<>>>><<<>><<<>>><<>>><<<<>>><>>>><<<>>><<>><<<>><<<<><<<>><<<<>>><>>>><><<<>>>><<<<>>>><<>><>>>><<<<><<<<>>>><<<>>>><><>>><<>>><<<<>>>><<>>><<>>>><<>>>><<>>><<>><<<<>>>><<<<>>><<<>><><>><>>><<<>><<<>><<>>><<<<>>>><<<>>><><<<>>><<<<>>>><<>>><<<<>>>><<>>>><<>>>><<><>>><<<<>>><<<<>>>><<<<>>><<><>><>>>><>>>><<<<>>><<<<>><<<<><<<>>><<<>>><>>><>>>><<<>>><<<<>>>><<<<><<><<<<>><>>><<<>><<>><<>>>><<<<>><<>><<<>><<<>>><<<<><<><<<>>><<<><<<<>><<><<<<>><<<>>>><<<>>><<>><<>>>><<<><<>><>>>><<>>><<<<><<<<><<<<><<<<>>><<<<><<>>><>>>><<<<>>><<<>>>><>>>><<>><>><<>>><>><>>>><<<<>>><<>>><<<<>>>><>><<<<>>><>>>><<<>><<>>>><<<<>><<><>>>><<<>>>><<>><<>>>><<<<><<<<>>><<><<<><<><<>>><<<<>>><>>>><<<>>>><<><<<<><>>><<<<>><<>><<>>><<>>><<<>><<<<><>>><>>>><>>>><<<<><<<<>>>><>>><<<<>>><<<<>>><>><<>>><>><>><<<<>><>>>><<<>>><><<<<>>>><<<<><<<><<><<<<>>><<<<><<>>><<<<>>>><<<<>>>><<<><<>><>>>><<<>><<>>><<<<>>><<<<>>>><<>>><<<>>>><><<><<<<>><<<<>><<<>>><<>>>><><>>><<<<><<>>>><>>><<><>>><>>><<>><<<<><<<<><<><<<<>><<<>>>><<>>>><><<><<>>>><>><<<>>><<<>><>>>><<<<>>>><<>><<<><>>><<<><>><<<><><>><<><<><<>><<<<><<><>>><<<<><<<>>>><>><<<>>><<<>>><<<>>>><<<>>><<><>>>><<<<>>>><<<>><<<<>>>><>><<<><<<><<<><<><<><<<>>><<>>><>><>>>><>>>><<<<>>>><<>><<<<>>><<<>>>><<><<<<>>>><><<<>><<>><>><<<>><>>>><<><>>><<><<>>><<<>><>><<>>><<<<>>>><<<<>>><<<<><<<>>><<><<<>><>><<<<>>>><<><<><<<>>><<<<>>>><<><<<><<>><<<<><<<<>>><>><<<><<><<<<>>><<>>><<<<>><<<><>><<<><<<>>>><<<<><<<><<<><>><><<<><<<<><<>><<<<>>>><<<>>><<>>>><<>>><<><>>><<><<<><>>>><<><<><>>><>><<<<>>>><>>><<<><>>>><<>>>><>><<<<>><<<>>>><<>><<<>>>><<<>><<<<>>><<<>>><<<<>>>><><>><<<<>><<>>><<<<>><<<>><<>>>><>><>>><<<>>>><<><>>><<<><>>>><<<>><>>>><<>>>><<<<><<>>>><>><<<>><<>>><<<<>>><<<<>>>><>>><<<>><<>>><<<>><<<><<<<><<<><>><<<<>>>><<<<>>>><>>>><>>>><<>><<><<<<><<<><<>>><>>>><<<>><<<><<<>>>><<<>>><<<>>><<<>>><>>><<<>>><>>><<>><>><<<<>>><<<><<>>><<<>><<<<>><<>><<<><<<>>>><>><<>>><<>><>>>><<<<><<>>>><<<>>><>><<<>>><<<<>>>><<<<>><<>><<<<>>><<<<>>><<<<>>><<>>><<>>><><>>><<<<>><>><<>>><<<>><<<><<<>>>><<><<<>><<<<>><<<<>>><>><><<<<><<<<>>><>>><<>><<>>>><<<<>>><>><<>>><>>><>><<<>>>><<<><><<<<>><<<>>>><<>><<>>>><<>>><>>>><<><>><<<<>><<>>><>>><<><<<><<<<>>><><<><<<><<<<>>>><<<>>>><<<<><<<>><<<<><>>><<>>>><<<>>><>>>><<><>>><<<>><<>>><<<<>>>><>>>><<<<><<<<><>>>><<<<>>><>>><<>>><<<>><<><<<>>><>>><<>>><<<<>><<>>>><<<<><<<><<<<>><<<<>>><<<><><<>>><>>><>>><<<<><>><<<<>>><<>>><>>>><<>>>><<>>>><<<<>>>><<<<>>><<>><<<<>>>><><<><><<<<>>><<<<>>><<<<><>><<>>>><>><<<>>><<><<>><<<<>>>><>><<>><<<><<<><<<<>>>><<><<>>>><<<<>>><<<<>>><>>>><<>><>><<><>><<>>><<<>>>><<>>>><<>>><<<<>>><<>>><><<<<><<<><<>><<<<>>><>>><<<>>>><<>>>><<<<>><>><<<>><>>><<<>>><<<>>>><>>><>><<<<>>>><><<<>>>><>><<<<>><<<<>>><><<<<>>><<>>><<>>>><<<<>><<>>><<><>><>>><<<<>><<<>><<<><<>>>><<><<<<><>><<>>><<<>><>>>><><<>>><<<<>>>><<><<>>><<<<><<>>>><<<<><<<><<>><><<<<>>><<>>>><><>>><<<>><<<<><<<>><<>>><<<>><<><<<>>>><>>><<><<>>><>>>><<<><<<<><<<>>><<<<>>><<<>><<<<>>>><<<><<<<>>>><><<<>><<>><<<<>>>><>><>>>><<<<>>><>>>><<<<><<<<>>>><<><>>>><<<><><>>>><<<>>>><<>>><<<><<>><<<><<<<><<<><<>><<>>><<<><<<<>><<<<><<<><<<><>>><<<<><<<<><><>><>><<<>><<<><<<>>>><<<>><<<>><<><><<<<>><>>>><<<>>>><>>><<>>>><<<>><<>><<<<><<<><>><<<>>><<<>>><<<<>><<<>>>><<>>>><>><<<<>><><<<>>><>><>>><<<<>>><<<<>>><<<><<<<>><<>>><<<><<<>><<<<>>><<<<><<>>>><<<>>><<<><<<<>>>><<>>><<>><<><>><<<<>>>><<<<>>>><<<<>>><<<<>><<>><<>><<<>><>><<<><<<<>>>><><<><<<><>>>><<<<>>><<>>>><<<>>>><<<<>>>><<<<>>>><<<>><<<<>><<<><<<>>>><<<<>>>><>><<<<>>>><<<>>><<>>>><<>>><<>>>><<>>><<<<>>>><>><<<<>>><<>>><>>><<<<>><<<>>>><<<<>>><<<>>><<<<>>>><<<<><<<<>>><<>>><>>><<<>>>><<>>>><<<>>>><<>>>><<>>><<<>>><<<<><>><<<<>>>><<<<>>><>>>><><>><>><>>><<<<>><>><<>>>><<<<>>><>>><<<>>><<>><<<<>><<>>>><<<>><>><<>>>><<<>>>><<>>>><><>>>><<<<><<<>>><<<<>>><<<>>>><<<<>>>><<<<><<>>><<>>><<<<>>><<<><<><>>><<<>><<>>><<<>>><<<<>><<<<>>><>>><<<<><><<><<<<><>>>><>><<<<>>>><<<<><<>>>><<<<>><<<<>>><<<<>><<<>>>><<<>>><<>><<<<>>><<<<>>>><<>>><<<<><<<>><<<<>><>>>><<<>>>><<<<>>><<<>><><>>><<>><<<>>><<<<>>>><<>>>><<>><<<<>>>><<<>>>><<<><<<<><<<<><<<<>>>><<<>>><<<<>>><<<>>>><<<<>>><<<<>>>><<<<>><<><<<>>><>>>><>>>><<<<><<<>>>><<>><<><<<>>>><<<>>><<<<>>>><<><>>><><<<<>>><<<<>>>><<<>>>><<>>><<<>><<<<>><<<>>>><><<><<<>>>><<<>><>><<<<>>><<<>>><<<<>>><<<<>>>><><<<><>>><>><<<>>><<<<><<<>>><<>>>><><<>>>><<<>>><<<><>>><<<<><<<<>>><<><>><<<<><><<<><<<<>>><<<>>>><>>><<>><<<>><<<>>>><<<>>>><<>>><<><<<><><><<<>>><<>>><<>>><<<<><<>>>><<<><>>><><<><<>>><<<>>><<<<>>><<<<>><<<<><>>>><<>>><<>><>>><<>><>><<><<<<>><>><<<<>>><<>>><<<<>><<<<>><<><<<><<<<>>>><<<<>><<>>><<<>><<<><<<>><>>>><<<>>>><><<><<<<>><<<<>>><<>>>><<<><>>>><<<>>><<<>><<<>>>><<<<>><<><<>>>><<<>><<<>>><<><<<>>><<><><<<<>>>><<><><<<>>>><<>><<>>><>><<<<>><<>>>><<<>><>><>>><<<<>><<<<>><<<>><<<>>>><<<>><<<<>>><<<>>><<<<>>><><<<>>>><<<><>><>>>><>>>><<<<><<>><<<><<<><>>><<>>><<>>>><>>>><>>><<>><<>>><>>>><<<>><<>><<<<>>><<<>>>><<<><<<><<<>>>><<<<>>><<<<>>>><<<>><<>>>><<>>>><><<<>>><>><<<>>>><<<<>><><<<><>><>>><>>>><<<<>>><<<>>><<<<><<<>><<>>>><<>>><<<<>>>><><<<><<<<>>>><<<<>><<<>>>><<>>><<><>><><<<>>>><<<><<<><>>><<<<>>>><<<<>>>>'
deltas_input = [-1 if c == '<' else 1 for c in puzzle_input]


def after_2022_rocks(deltas):
    def print_tunnel(T, limit=None):
        if limit is None:
            limit = len(T)

        print("       0 1 2 3 4 5 6  ")
        for i in range(len(T) - 1, max(-1, len(T) - 1 - limit), -1):
            row = f"{i:<4}"
            row_arr = ['.'] * 7
            for start, end in T[i]:
                assert start >= 0, f"start is {start}"
                assert end <= 7, f"end is {end}"
                for j in range(start, end):
                    row_arr[j] = '#'

            row = f"{row} | {' '.join(row_arr)} |"
            print(row)

        print()

    def update_tunnel(tunnel_line, rock_line):
        rock_start, rock_end = rock_line
        res = []

        for i, (start, end) in enumerate(tunnel_line):

            if rock_end < start:
                # no need to keep going
                res.append((rock_start, rock_end))
                res.extend(tunnel_line[i:])
                return res

            if rock_start > end:
                res.append(tunnel_line[i])
            else:
                rock_start = min(rock_start, start)
                rock_end = max(rock_end, end)
                assert rock_end <= 7

        res.append((rock_start, rock_end))
        return res

    tunnel = []

    rock_idx = 0
    delta_idx = 0
    cache = defaultdict(set)

    for count in range(2022):
        rock_idx_save = rock_idx
        delta_idx_save = delta_idx

        # for 3 times, there will be no touch but only adjusting and fall
        # for 4 th time, it will also be adjusted first before falling
        rock_templ = rocks_template[rock_idx]
        rock = Rock([])
        rock.copy(rock_templ)
        # adjust-fall-adjust-fall-adjust-fall-adjust
        # can adjust 4 times before deciding it needs to rest or not
        for _ in range(4):
            # no need to worry about the formed rocks yet
            assert 0 <= delta_idx < len(deltas), f"{delta_idx}"
            delta = deltas[delta_idx]
            rock.adjust(delta, [])
            delta_idx = (delta_idx + 1) % len(deltas)

        # from the 4th fall, it could hit a rock and rest
        line_below = len(tunnel) - 1
        while not rock.rest(line_below, tunnel):
            # fall
            line_below -= 1

            # adjust
            delta = deltas[delta_idx]
            rock.adjust(delta, tunnel[line_below + 1:])  # line_below is still below, so +1
            delta_idx = (delta_idx + 1) % len(deltas)

        # after rest, tunnel ranges need be adjusted
        rock_bottom_line = line_below + 1
        for i, line in enumerate(rock.lines):
            if len(tunnel) < rock_bottom_line + i + 1:
                tunnel.append([])
            tunnel[rock_bottom_line + i] = update_tunnel(tunnel[rock_bottom_line + i], line)

        # print_tunnel(tunnel, 100)
        # print(len(tunnel))
        rock_idx = (rock_idx + 1) % 5

        cache[rock_idx_save, delta_idx_save].add(count)

    print_tunnel(tunnel)
    # for key, value in cache.items():
    # print(key, value)
    print(len(tunnel))


if __name__ == '__main__':
    after_2022_rocks(deltas_sample)
    # after_2022_rocks(deltas_input)
